-- if true then
--   return {}
-- end
local i = 0

return {
  -- { name = "folketest", dir = "~/projects/test" },
  -- {
  --   "ggandor/leap.nvim",
  --   keys = false,
  --   config = function(_, opts)
  --     local leap = require("leap")
  --     for k, v in pairs(opts) do
  --       leap.opts[k] = v
  --     end
  --     leap.add_default_mappings(true)
  --     vim.keymap.del({ "x", "o" }, "x")
  --     vim.keymap.del({ "x", "o" }, "X")
  --   end,
  -- },
  -- {
  --   "L3MON4D3/LuaSnip",
  --   keys = function()
  --     return {}
  --   end,
  -- },
  -- {
  --   "hrsh7th/nvim-cmp",
  --   dependencies = {
  --     "hrsh7th/cmp-emoji",
  --   },
  --   ---@param opts cmp.ConfigSchema
  --   opts = function(_, opts)
  --     local has_words_before = function()
  --       unpack = unpack or table.unpack
  --       local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  --       return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  --     end
  --
  --     local luasnip = require("luasnip")
  --     local cmp = require("cmp")
  --
  --     opts.mapping = vim.tbl_extend("force", opts.mapping, {
  --       ["<Tab>"] = cmp.mapping(function(fallback)
  --         if cmp.visible() then
  --           cmp.select_next_item()
  --         -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
  --         -- they way you will only jump inside the snippet region
  --         elseif luasnip.expand_or_jumpable() then
  --           luasnip.expand_or_jump()
  --         elseif has_words_before() then
  --           cmp.complete()
  --         else
  --           fallback()
  --         end
  --       end, { "i", "s" }),
  --       ["<S-Tab>"] = cmp.mapping(function(fallback)
  --         if cmp.visible() then
  --           cmp.select_prev_item()
  --         elseif luasnip.jumpable(-1) then
  --           luasnip.jump(-1)
  --         else
  --           fallback()
  --         end
  --       end, { "i", "s" }),
  --     })
  --   end,
  -- },
  -- {
  --   "folke/noice.nvim",
  --   keys = {
  --     { "<c-f>", false, mode = { "i", "n", "s" } },
  --     { "<c-b>", false, mode = { "i", "n", "s" } },
  --   },
  -- },
  -- {
  --   "folke/tokyonight.nvim",
  --   lazy = false,
  --   priority = 1000,
  --   config = function()
  --     i = i + 1
  --     dd("color" .. i)
  --     require("tokyonight").setup()
  --     vim.cmd.colorscheme("tokyonight")
  --     vim.api.nvim_set_hl(0, "Normal", { bg = "#000000" })
  --   end,
  -- },
  -- {
  --   "authot/plugin.vim",
  --   init = function(plugin)
  --     vim.fn["flog#cmd#flog"] = function(...)
  --       vim.fn["flog#cmd#flog"] = nil
  --       require("lazy").load({ plugins = { plugin } })
  --       return vim.fn["flog#cmd#flog"](...)
  --     end
  --   end,
  -- },
  -- {
  --
  --   "echasnovski/mini.surround",
  --   opts = {
  --     mappings = {
  --       add = "sa",
  --       delete = "sd",
  --       find = "sf",
  --       find_left = "sF",
  --       highlight = "sh",
  --       replace = "sr",
  --       update_n_lines = "sn",
  --     },
  --   },
  -- },
  -- {
  --   "neovim/nvim-lspconfig",
  --   opts = {
  --     servers = {
  --       lua_ls = false,
  --     },
  --   },
  -- },
  -- {
  --   "akinsho/bufferline.nvim",
  --   event = "VeryLazy",
  --   opts = function()
  --     return {
  --       options = {
  --         always_show_bufferline = true,
  --       },
  --     }
  --   end,
  -- },
  -- {
  --   "folke/tokyonight.nvim",
  --   opts = {
  --     transparent = true,
  --     styles = {
  --       sidebars = "transparent",
  --       floats = "transparent",
  --     },
  --   },
  -- },
  -- {
  --   "rcarriga/nvim-notify",
  --   opts = {
  --     render = "compact",
  --   },
  -- },
  -- { "stevearc/dressing.nvim", enabled = false },
  -- { "rcarriga/nvim-notify", enabled = false },
  -- { "folke/noice.nvim", enabled = false },
  -- { "akinsho/bufferline.nvim", enabled = false },
  --
  -- {
  --   "romgrk/barbar.nvim",
  --   config = true,
  -- },
  -- { "ggandor/flit.nvim", enabled = false },
  -- {
  --   "unblevable/quick-scope",
  --   lazy = false,
  --   init = function()
  --     vim.g.qs_highlight_on_keys = { "f", "F", "t", "T" }
  --   end,
  -- },
  --
  -- {
  --   "wookayin/semshi",
  --   build = ":UpdateRemotePlugins",
  -- },
}
